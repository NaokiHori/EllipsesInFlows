#if !defined(ARRAYS_FLUID_H)
#define ARRAYS_FLUID_H
/* This file is automatically generated by define_array.py */

/* ux (double, 2D) [1:itot+1] x [0:jsize+1] */
#define UX_MIN_I (1)
#define UX_MAX_I (itot+1)
#define UX_LEN_I (UX_MAX_I-UX_MIN_I+1)
#define UX_MIN_J (0)
#define UX_MAX_J (jsize+1)
#define UX_LEN_J (UX_MAX_J-UX_MIN_J+1)
#define UX_MEMSIZE (sizeof(double)*(UX_LEN_I)*(UX_LEN_J))
#define UX(I, J) (ux[(J)*(itot+1)+((I)-1)])

/* uy (double, 2D) [0:itot+1] x [0:jsize+1] */
#define UY_MIN_I (0)
#define UY_MAX_I (itot+1)
#define UY_LEN_I (UY_MAX_I-UY_MIN_I+1)
#define UY_MIN_J (0)
#define UY_MAX_J (jsize+1)
#define UY_LEN_J (UY_MAX_J-UY_MIN_J+1)
#define UY_MEMSIZE (sizeof(double)*(UY_LEN_I)*(UY_LEN_J))
#define UY(I, J) (uy[(J)*(itot+2)+(I)])

/* p (double, 2D) [0:itot+1] x [0:jsize+1] */
#define P_MIN_I (0)
#define P_MAX_I (itot+1)
#define P_LEN_I (P_MAX_I-P_MIN_I+1)
#define P_MIN_J (0)
#define P_MAX_J (jsize+1)
#define P_LEN_J (P_MAX_J-P_MIN_J+1)
#define P_MEMSIZE (sizeof(double)*(P_LEN_I)*(P_LEN_J))
#define P(I, J) (p[(J)*(itot+2)+(I)])

/* psi (double, 2D) [0:itot+1] x [0:jsize+1] */
#define PSI_MIN_I (0)
#define PSI_MAX_I (itot+1)
#define PSI_LEN_I (PSI_MAX_I-PSI_MIN_I+1)
#define PSI_MIN_J (0)
#define PSI_MAX_J (jsize+1)
#define PSI_LEN_J (PSI_MAX_J-PSI_MIN_J+1)
#define PSI_MEMSIZE (sizeof(double)*(PSI_LEN_I)*(PSI_LEN_J))
#define PSI(I, J) (psi[(J)*(itot+2)+(I)])

/* srcuxa (double, 2D) [2:itot] x [1:jsize] */
#define SRCUXA_MIN_I (2)
#define SRCUXA_MAX_I (itot)
#define SRCUXA_LEN_I (SRCUXA_MAX_I-SRCUXA_MIN_I+1)
#define SRCUXA_MIN_J (1)
#define SRCUXA_MAX_J (jsize)
#define SRCUXA_LEN_J (SRCUXA_MAX_J-SRCUXA_MIN_J+1)
#define SRCUXA_MEMSIZE (sizeof(double)*(SRCUXA_LEN_I)*(SRCUXA_LEN_J))
#define SRCUXA(I, J) (srcuxa[((J)-1)*(itot-1)+((I)-2)])

/* srcuxb (double, 2D) [2:itot] x [1:jsize] */
#define SRCUXB_MIN_I (2)
#define SRCUXB_MAX_I (itot)
#define SRCUXB_LEN_I (SRCUXB_MAX_I-SRCUXB_MIN_I+1)
#define SRCUXB_MIN_J (1)
#define SRCUXB_MAX_J (jsize)
#define SRCUXB_LEN_J (SRCUXB_MAX_J-SRCUXB_MIN_J+1)
#define SRCUXB_MEMSIZE (sizeof(double)*(SRCUXB_LEN_I)*(SRCUXB_LEN_J))
#define SRCUXB(I, J) (srcuxb[((J)-1)*(itot-1)+((I)-2)])

/* srcuxg (double, 2D) [2:itot] x [1:jsize] */
#define SRCUXG_MIN_I (2)
#define SRCUXG_MAX_I (itot)
#define SRCUXG_LEN_I (SRCUXG_MAX_I-SRCUXG_MIN_I+1)
#define SRCUXG_MIN_J (1)
#define SRCUXG_MAX_J (jsize)
#define SRCUXG_LEN_J (SRCUXG_MAX_J-SRCUXG_MIN_J+1)
#define SRCUXG_MEMSIZE (sizeof(double)*(SRCUXG_LEN_I)*(SRCUXG_LEN_J))
#define SRCUXG(I, J) (srcuxg[((J)-1)*(itot-1)+((I)-2)])

/* srcuya (double, 2D) [1:itot] x [1:jsize] */
#define SRCUYA_MIN_I (1)
#define SRCUYA_MAX_I (itot)
#define SRCUYA_LEN_I (SRCUYA_MAX_I-SRCUYA_MIN_I+1)
#define SRCUYA_MIN_J (1)
#define SRCUYA_MAX_J (jsize)
#define SRCUYA_LEN_J (SRCUYA_MAX_J-SRCUYA_MIN_J+1)
#define SRCUYA_MEMSIZE (sizeof(double)*(SRCUYA_LEN_I)*(SRCUYA_LEN_J))
#define SRCUYA(I, J) (srcuya[((J)-1)*(itot  )+((I)-1)])

/* srcuyb (double, 2D) [1:itot] x [1:jsize] */
#define SRCUYB_MIN_I (1)
#define SRCUYB_MAX_I (itot)
#define SRCUYB_LEN_I (SRCUYB_MAX_I-SRCUYB_MIN_I+1)
#define SRCUYB_MIN_J (1)
#define SRCUYB_MAX_J (jsize)
#define SRCUYB_LEN_J (SRCUYB_MAX_J-SRCUYB_MIN_J+1)
#define SRCUYB_MEMSIZE (sizeof(double)*(SRCUYB_LEN_I)*(SRCUYB_LEN_J))
#define SRCUYB(I, J) (srcuyb[((J)-1)*(itot  )+((I)-1)])

/* srcuyg (double, 2D) [1:itot] x [1:jsize] */
#define SRCUYG_MIN_I (1)
#define SRCUYG_MAX_I (itot)
#define SRCUYG_LEN_I (SRCUYG_MAX_I-SRCUYG_MIN_I+1)
#define SRCUYG_MIN_J (1)
#define SRCUYG_MAX_J (jsize)
#define SRCUYG_LEN_J (SRCUYG_MAX_J-SRCUYG_MIN_J+1)
#define SRCUYG_MEMSIZE (sizeof(double)*(SRCUYG_LEN_I)*(SRCUYG_LEN_J))
#define SRCUYG(I, J) (srcuyg[((J)-1)*(itot  )+((I)-1)])

#endif // ARRAYS_FLUID_H
