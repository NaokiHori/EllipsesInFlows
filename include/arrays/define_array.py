def attach_header(f, name):
    # write header part (include gard)
    name = name.upper()
    f.write("#if !defined(ARRAYS_{}_H)\n".format(name))
    f.write("#define ARRAYS_{}_H\n".format(name))
    f.write("/* This file is automatically generated by define_array.py */\n")
    f.write("\n")

def attach_footer(f, name):
    # close macro started by attach_header
    name = name.upper()
    f.write("#endif // ARRAYS_{}_H\n".format(name))

def get_end(prefix, start, size):
    # compute final index from start index and array size
    end = size.strip().split(prefix)[1]
    if end:
        end = int(end)+start-1
    else:
        end = +start-1
    if not end == 0:
        end = "{}{:+d}".format(prefix, end)
    else:
        end = prefix
    return end

def generate_grid_1d(f, name, dtype, indexlabel, istart, isize):
    uname = name.upper()
    if istart == 0:
        ipart = "({})".format(indexlabel)
    else:
        ipart = "(({}){:+d})".format(indexlabel, -istart)
    if "itot" in isize:
        iend = get_end("itot", istart, isize)
    elif "jtot" in isize:
        iend = get_end("jtot", istart, isize)
    elif "jsize" in isize:
        iend = get_end("jsize", istart, isize)
    else:
        print(name)
        sys.exit()
    format_dict = {
            "name": name,
            "uname": uname,
            "dtype": dtype,
            "istart": istart,
            "iend": iend,
            "indexlabel": indexlabel,
            "ipart": ipart,
    }
    string = (
            "/* {name} ({dtype}, 1D) [{istart}:{iend}] */\n"
            "#define {uname}_MIN ({istart})\n"
            "#define {uname}_MAX ({iend})\n"
            "#define {uname}_LEN ({uname}_MAX-{uname}_MIN+1)\n"
            "#define {uname}_MEMSIZE (sizeof({dtype})*{uname}_LEN)\n"
            "#define {uname}({indexlabel}) ({name}[{ipart}])\n"
            "\n"
    )
    string = string.format(**format_dict)
    f.write(string)

def generate_grid_2d(f, name, dtype, istart, isize, jstart, jsize):
    uname = name.upper()
    if istart == 0:
        ipart = "(I)"
    else:
        ipart = "((I){:+d})".format(-istart)
    if jstart == 0:
        jpart = "(J)"
    else:
        jpart = "((J){:+d})".format(-jstart)
    iend = get_end("itot",  istart, isize)
    jend = get_end("jsize", jstart, jsize)
    format_dict = {
            "name": name,
            "uname": uname,
            "dtype": dtype,
            "istart": istart,
            "iend": iend,
            "ipart": ipart,
            "isize": isize,
            "jstart": jstart,
            "jend": jend,
            "jpart": jpart,
    }
    string = (
            "/* {name} ({dtype}, 2D) [{istart}:{iend}] x [{jstart}:{jend}] */\n"
            "#define {uname}_MIN_I ({istart})\n"
            "#define {uname}_MAX_I ({iend})\n"
            "#define {uname}_LEN_I ({uname}_MAX_I-{uname}_MIN_I+1)\n"
            "#define {uname}_MIN_J ({jstart})\n"
            "#define {uname}_MAX_J ({jend})\n"
            "#define {uname}_LEN_J ({uname}_MAX_J-{uname}_MIN_J+1)\n"
            "#define {uname}_MEMSIZE (sizeof({dtype})*({uname}_LEN_I)*({uname}_LEN_J))\n"
            "#define {uname}(I, J) ({name}[{jpart}*({isize})+{ipart}])\n"
            "\n"
    )
    string = string.format(**format_dict)
    f.write(string)


if __name__ == "__main__":
    # size in y-direction for each process
    # coordinate
    with open("param.h", "w", encoding="utf-8") as f:
        attach_header(f, "param")
        generate_grid_1d(f, "xf",  "double", "I", 1, "itot+1")
        generate_grid_1d(f, "xc",  "double", "I", 0, "itot+2")
        generate_grid_1d(f, "dxf", "double", "I", 1, "itot  ")
        generate_grid_1d(f, "dxc", "double", "I", 1, "itot+1")
        generate_grid_1d(f, "yf",  "double", "J", 1, "jsize+1")
        generate_grid_1d(f, "yc",  "double", "J", 1, "jsize  ")
        attach_footer(f, "param")
    # velocity, pressure, scalar potential, and source terms of RK
    with open("fluid.h", "w", encoding="utf-8") as f:
        attach_header(f, "fluid")
        generate_grid_2d(f, "ux",     "double", 1, "itot+1",  0, "jsize+2")
        generate_grid_2d(f, "uy",     "double", 0, "itot+2",  0, "jsize+2")
        generate_grid_2d(f, "p",      "double", 0, "itot+2",  0, "jsize+2")
        generate_grid_2d(f, "psi",    "double", 0, "itot+2",  0, "jsize+2")
        generate_grid_2d(f, "srcuxa", "double", 2, "itot-1",  1, "jsize  ")
        generate_grid_2d(f, "srcuxb", "double", 2, "itot-1",  1, "jsize  ")
        generate_grid_2d(f, "srcuxg", "double", 2, "itot-1",  1, "jsize  ")
        generate_grid_2d(f, "srcuya", "double", 1, "itot  ",  1, "jsize  ")
        generate_grid_2d(f, "srcuyb", "double", 1, "itot  ",  1, "jsize  ")
        generate_grid_2d(f, "srcuyg", "double", 1, "itot  ",  1, "jsize  ")
        attach_footer(f, "fluid")
    # velocity, pressure, scalar potential, and source terms of RK
    with open("suspensions.h", "w", encoding="utf-8") as f:
        attach_header(f, "suspensions")
        generate_grid_2d(f, "dux", "double", 0, "itot+2", 0, "jsize+2")
        generate_grid_2d(f, "duy", "double", 0, "itot+2", 0, "jsize+2")
        attach_footer(f, "suspensions")
    # arrays to store temporally-averaged statistics
    with open("statistics.h", "w", encoding="utf-8") as f:
        attach_header(f, "statistics")
        # arrays have halo cells, which are not necessary
        # this is to simplify the output procedure (to use the same wrapper as velocity)
        generate_grid_2d(f, "ux1",   "double", 1, "itot+1",  0, "jsize+2")
        generate_grid_2d(f, "ux2",   "double", 1, "itot+1",  0, "jsize+2")
        generate_grid_2d(f, "uy1",   "double", 0, "itot+2",  0, "jsize+2")
        generate_grid_2d(f, "uy2",   "double", 0, "itot+2",  0, "jsize+2")
        generate_grid_2d(f, "phi",   "double", 0, "itot+2",  0, "jsize+2")
        attach_footer(f, "statistics")

